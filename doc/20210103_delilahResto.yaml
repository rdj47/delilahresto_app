swagger: "2.0"
info:
  description: "This is a sample server Delilah Restó app.  You can find out more about Delilah Restó at [http://delilahresto.io](http://delilahresto.io).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Delilah Restó"
  termsOfService: "http://delilahresto.io/terms/"
  contact:
    email: "rdj47@hotmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:4000"
basePath: "/"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
- name: "item"
  description: "Everything about Delilah Restó menu items"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"

schemes:
- "http"
paths:

  /signup:
    post:
      tags:
      - "user"
      summary: "User signup Delilah Restó"
      description: ""
      operationId: "signup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the store."
        required: true
        schema:
          $ref: "#/definitions/SignUpRequest"
      responses:
        "200":
          description: "Successful operation."
          schema:
              $ref: "#/definitions/SignUpResponse"
        "400":
          description: "Unsuccessful operation."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "500":
          description: "Unsuccessful operation due to internal server error."
          schema:
              $ref: "#/definitions/Error500Response"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /login:
    post:
      tags:
      - "user"
      summary: "User login Delilah Restó"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Credentials that need to be sent to login."
        required: true
        schema:
          $ref: "#/definitions/Credentials"
      responses:
        "200":
          description: "Successful operation."
          schema:
              $ref: "#/definitions/SignUpResponse"
        "400":
          description: "Unsuccessful operation."
          schema:
              $ref: "#/definitions/Error400Response"
        "500":
          description: "Unsuccessful operation due to internal server."
          schema:
              $ref: "#/definitions/Error500Response"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /profile:
    get:
      tags:
      - "user"
      summary: "Query user information"
      description: "Query item information based on itemId. If itemId is not included in the request, all items information will be queried."
      operationId: "profile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "JWT"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /item:
    post:
      tags:
      - "item"
      summary: "Add a new item to the Delilah Restó menu"
      description: ""
      operationId: "addItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        description: "JWT that includes admin username."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Item object that needs to be added to the resto."
        required: true
        schema:
          $ref: "#/definitions/AddItemRequest"
      responses:
        "200":
          description: "Successful operation."
          schema:
              $ref: "#/definitions/CUDItemResponse"
        "400":
          description: "Unsuccessful operation."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "401":
          description: "Unsuccessful operation due to invalid JWT."
          schema:
              $ref: "#/definitions/Error401Response"
        "403":
          description: "Unsuccessful operation due to user privileges."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "500":
          description: "Unsuccessful operation due to internal server error."
          schema:
              $ref: "#/definitions/Error500Response"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "item"
      summary: "Query Delilah Restó menu's items information"
      description: "If query parameter itemId is sent, only information regarding that itemId will be returned."
      operationId: "queryItems"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "JWT"
        required: true
        type: "string"
      - name: "itemId"
        in: "query"
        description: "ID of item to return"
        required: false
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation."
          schema:
              $ref: "#/definitions/QueryItemsResponse"
        "400":
          description: "Unsuccessful operation."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "401":
          description: "Unsuccessful operation due to invalid JWT."
          schema:
              $ref: "#/definitions/Error401Response"
        "403":
          description: "Unsuccessful operation due to user privileges."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "500":
          description: "Unsuccessful operation due to internal server error."
          schema:
              $ref: "#/definitions/Error500Response"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "item"
      summary: "Update a Delilah Restó item"
      description: "At least, an item parameter must be included in the request."
      operationId: "updateItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "JWT"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Item object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/UpdateItemRequest"
      responses:
        "200":
          description: "Successful operation."
          schema:
              $ref: "#/definitions/CUDItemResponse"
        "400":
          description: "Unsuccessful operation."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "401":
          description: "Unsuccessful operation due to invalid JWT."
          schema:
              $ref: "#/definitions/Error401Response"
        "403":
          description: "Unsuccessful operation due to user privileges."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "500":
          description: "Unsuccessful operation due to internal server error."
          schema:
              $ref: "#/definitions/Error500Response"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "item"
      summary: "Delete an existing item from Delilah Restó menu"
      description: ""
      operationId: "deleteItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        description: "JWT that includes admin username."
        required: true
        type: "string"
      - name: "itemId"
        in: "query"
        description: "ID of item to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation."
          schema:
              $ref: "#/definitions/CUDItemResponse"
        "400":
          description: "Unsuccessful operation."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "401":
          description: "Unsuccessful operation due to invalid JWT."
          schema:
              $ref: "#/definitions/Error401Response"
        "403":
          description: "Unsuccessful operation due to user privileges."
          schema:
              $ref: "#/definitions/Error40XResponse"
        "500":
          description: "Unsuccessful operation due to internal server error."
          schema:
              $ref: "#/definitions/Error500Response"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /item/findByStatus:
    get:
      tags:
      - "item"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /item/findByTags:
    get:
      tags:
      - "item"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /item/{petId}:
    get:
      tags:
      - "item"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "item"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "item"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /item/{petId}/uploadImage:
    post:
      tags:
      - "item"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /item/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  SignUpRequest:
    type: "object"
    required:
    - "newUserData"
    properties:
      newUserData:
        type: "object"
        required:
        - "username"
        - "fullname"
        - "email"
        - "phone"
        - "address"
        - "password"
        - "role"
        properties:
          username:
            type: "string"
          fullname:
            type: "string"
          email:
            type: "string"
          phone:
            type: "integer"
          address:
            type: "string"
          password:
            type: "string"
          role:
            type: "string"
            enum:
            - "customer"
            - "admin"
        xml:
          name: "newUserData"    
    xml:
      name: "SignUpRequest"
  SignUpResponse:
    type: "object"
    required:
    - "userId"
    - "message"
    properties:
      userId:
        type: "integer"
      message:
        type: "string"
    xml:
      name: "SignUpResponse"
  Error40XResponse:
    type: "object"
    required:
    - "errorCode"
    - "type"
    - "erroMessage"
    properties:
      errorCode:
        type: "integer"
      type:
        type: "string"
      erroMessage:
        type: "string"
    xml:
      name: "Error40XResponse"
  Error500Response:
    type: "object"
    required:
    - "errorCode"
    - "type"
    - "erroMessage"
    properties:
      errorCode:
        type: "integer"
        example: "9999"
      type:
        type: "string"
        example: "internal"
      erroMessage:
        type: "string"
        example: "Transaction can not be completed due to internal error"
    xml:
      name: "Error500Response"
  Credentials:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      username:
        type: "string"
      password:
        type: "string"
    xml:
      name: "Credentials"
  AddItemRequest:
    type: "object"
    required:
    - "newItemData"
    properties:
      newItemData:
        type: "object"
        required:
        - "name"
        - "shortDesc"
        - "photoUrl"
        - "price"
        properties:
          name:
            type: "string"
          shortDesc:
            type: "string"
          photoUrl:
            type: "string"
          price:
            type: "number"
            format: "float"
    xml:
      name: "AddItemRequest"
  CUDItemResponse:
    type: "object"
    required:
    - "itemId"
    - "message"
    properties:
      itemId:
        type: "integer"
      message:
        type: "string"
    xml:
      name: "CUDItemResponse"
  Error401Response:
    type: "string"
    example: "Invalid token."
    xml:
      name: "Error401Response"
  QueryItemsResponse:
    type: "object"
    properties:
      itemList:
        type: "array"
        items:
          $ref: "#/definitions/Item"
      message:
        type: "string"
        example: "Item(s) queried successfully."
    xml:
      name: "QueryItemsResponse"
  Item:
    type: "object"
    properties:
      itemId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "burger"
      shortDesc:
        type: "string"
        example: "burg"
      photoUrl:
        type: "string"
        example: "https://www.delilahresto.com/images/burger.jpg"
      price:
        type: "number"
        format: "float"
      createdBy:
        type: "string"
        example: "username"
      createdAt:
        type: "string"
        example: "2020-12-19T20:31:30.000Z"
      updatedBy:
        type: "string"
        example: "username"
      updatedAt:
        type: "string"
        example: "2020-12-19T20:31:30.000Z"
    xml:
      name: "QueryItemsResponse"
  UpdateItemRequest:
    type: "object"
    required:
    - "itemId"
    - "newItemData"
    properties:
      itemId:
        type: "integer"
      newItemData:
        type: "object"
        properties:
          name:
            type: "string"
          shortDesc:
            type: "string"
          photoUrl:
            type: "string"
          price:
            type: "number"
            format: "float"
    xml:
      name: "UpdateItemRequest"  
  DeleteItemRequest:
    type: "object"
    required:
    - "itemId"
    - "newItemData"
    properties:
      itemId:
        type: "integer"
      newItemData:
        type: "object"
        properties:
          name:
            type: "string"
          shortDesc:
            type: "string"
          photoUrl:
            type: "string"
          price:
            type: "number"
            format: "float"
    xml:
      name: "DeleteItemRequest"  
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  NewItem:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      itemId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "burger"
      shortDesc:
        type: "string"
        example: "burg"
      photoUrls:
        type: "string"
        example: "https://www.delilahresto.com/images/burger.jpg"
      price:
        type: "number"
        format: "float"
        example: "140.50"
    xml:
      name: "NewItem"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"